{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","collapsed","onDetailsClick","_this","setState","this","event","props","react_default","a","createElement","className","summary","location","start","description","concat","onClick","Component","EventList","events","map","key","id","src_Event","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","handleItemClicked","suggestion","_this2","type","onChange","NumberOfEvents","numberOfEvents","onInputChange","App","src_CitySearch","src_NumberOfEvents","src_EventList","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.452881e6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Event extends Component {\r\n    state = {\r\n        collapsed: true\r\n    };\r\n\r\n    onDetailsClick = () => {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {collapsed} = this.state;\r\n        const {event} = this.props;\r\n        return (        \r\n            <div className=\"event\">\r\n                <h1 className=\"summary\">{event.summary}</h1>\r\n                <h2 className=\"event-location\">{event.location}</h2>\r\n                <p className = \"date-time\">{event.start}</p>\r\n                <div>\r\n                    <br/>\r\n                    <p className = \"event-details\">{event.description}</p>\r\n                </div>\r\n                <button className={`details-button ${this.state.collapsed ? \"display\" : \"hide\"}-details`} onClick={this.onDetailsClick}>{this.state.collapsed ? \"Show Details\" : \"Hide-Details\"}</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Event;","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n    render() {\r\n        const { events } = this.props;\r\n        return (\r\n          <ul className=\"EventList\">\r\n            {events.map(event =>\r\n                <li key={event.id}>\r\n                    <Event event={event} />\r\n                </li>\r\n            )}\r\n          </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventList;","import React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n    state = {\r\n        query: '',\r\n        suggestions: []\r\n    }\r\n\r\n    handleInputChanged = (event) => {\r\n        const value = event.target.value;\r\n        const suggestions = this.props.locations.filter((location) => {\r\n          return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n        });\r\n        this.setState({\r\n          query: value,\r\n          suggestions,\r\n        });\r\n    };\r\n\r\n    handleItemClicked = (suggestion) => {\r\n        this.setState({\r\n          query: suggestion\r\n        });\r\n    };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CitySearch\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"city\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n        <ul className=\"suggestions\">\r\n            {this.state.suggestions.map((suggestion) => (\r\n                <li\r\n                key={suggestion}\r\n                onClick={() => this.handleItemClicked(suggestion)}\r\n                >{suggestion}\r\n                </li>\r\n            ))}\r\n            <li>\r\n                <b>See all cities</b>\r\n            </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n    state = {\r\n        numberOfEvents: '32',\r\n    }\r\n\r\n    onInputChange = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({\r\n            numberOfEvents: event.target.value\r\n        });\r\n    };\r\n    \r\n    render() {\r\n        \r\n        return(\r\n            <div className='event-number'>\r\n                <p> change number of events</p><span><input type='number' className='number' value={this.state.numberOfEvents} onChange={this.onInputChange}></input></span>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default NumberOfEvents;","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch />\n        <NumberOfEvents />\n        <EventList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}